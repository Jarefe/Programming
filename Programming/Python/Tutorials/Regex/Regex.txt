### Regex Cheatsheet

The ? matches zero or one of the preceding group.
The * matches zero or more of the preceding group.
The + matches one or more of the preceding group.
The {n} matches exactly n of the preceding group.
The {n,} matches n or more of the preceding group.
The {,m} matches 0 to m of the preceding group.
The {n,m} matches at least n and at most m of the preceding group.
{n,m}? or *? or +? performs a non-greedy match of the preceding group.
^spam means the string must begin with spam.
spam$ means the string must end with spam.
The . matches any character, except newline characters.
\d, \w, and \s match a digit, word, or space character, respectively.
\D, \W, and \S match anything except a digit, word, or space character, respectively.
[abc] matches any character between the brackets (such as a, b, or c).
[^abc] matches any character that isn’t between the brackets.

### 1. Basic Characters

Pattern        | Description                                             | Example         
----------------|---------------------------------------------------------|-----------------
a               | Matches the character `a`.                              | a               
.               | Matches any character except newline.                   | a.b             
\               | Escape character (use before special characters).       | \.              
---

### 2. Character Classes

Pattern        | Description                                             | Example         
----------------|---------------------------------------------------------|-----------------
[aabc]         | Matches any one of the characters `a`, `b`, or `c`.      | a, b, c         
[^abc]         | Matches any character except `a`, `b`, or `c`.          | d, 1, etc.      
[a-z]          | Matches any lowercase letter (range).                   | a, z            
[A-Z]          | Matches any uppercase letter (range).                   | A, Z            
[0-9]          | Matches any digit (0-9).                                | 1, 8, etc.      
\d              | Matches any digit (equivalent to [0-9]).                | 5               
\D              | Matches any non-digit.                                  | a, #, etc.      
\w              | Matches any word character (alphanumeric + _).          | a, A, 1         
\W              | Matches any non-word character.                         | #, @, !         
\s              | Matches any whitespace character (spaces, tabs, etc.).  | ' ', \t, \n     
\S              | Matches any non-whitespace character.                   | a, 9, !         
---

### 3. Quantifiers

Pattern        | Description                                             | Example         
----------------|---------------------------------------------------------|-----------------
*               | Matches 0 or more of the preceding element.              | a* (matches '', a, aa, etc.)  
+               | Matches 1 or more of the preceding element.              | a+ (matches a, aa, aaa, etc.)  
?               | Matches 0 or 1 of the preceding element.                 | a? (matches '', a) 
{n}             | Matches exactly `n` occurrences of the preceding element.| a{3} (matches aaa)  
{n,}            | Matches `n` or more occurrences of the preceding element.| a{2,} (matches aa, aaa, aaaa, etc.)  
{n,m}           | Matches between `n` and `m` occurrences of the element.  | a{2,4} (matches aa, aaa, aaaa) 
---

### 4. Anchors

Pattern        | Description                                             | Example         
----------------|---------------------------------------------------------|-----------------
^               | Anchors the match to the **beginning** of the string.    | ^a matches `a` at the start of a string
$               | Anchors the match to the **end** of the string.         | a$ matches `a` at the end of a string
\b              | Word boundary (matches the position between a word character and a non-word character). | \bword\b matches `word` as a whole word.
\B              | Non-word boundary (matches a position not between a word character and a non-word character). | \Bword\B won't match `word` as a whole word. 
---

### 5. Groups & Capturing

Pattern        | Description                                             | Example         
----------------|---------------------------------------------------------|-----------------
(abc)           | Capturing group – matches and stores the pattern `abc`.  | abc
(?:abc)         | Non-capturing group – matches but doesn't store `abc`.   | abc
\1, \2, etc.    | Backreference to a captured group.                      | (abc)\1 matches `abcabc`
---

### 6. Special Sequences

Pattern        | Description                                             | Example         
----------------|---------------------------------------------------------|-----------------
\d              | Matches a digit (equivalent to [0-9]).                   | 5               
\D              | Matches a non-digit.                                    | a               
\w              | Matches a word character (letters, digits, _).          | a, 1, _         
\W              | Matches a non-word character.                           | #, @            
\s              | Matches any whitespace (space, tab, newline).           | ' ', \t, \n     
\S              | Matches any non-whitespace character.                   | a, #            
---

### 7. Lookahead & Lookbehind (Advanced)

Pattern        | Description                                             | Example         
----------------|---------------------------------------------------------|-----------------
(?=...)         | Positive lookahead – matches only if the pattern is followed by the given pattern. | \d(?=\D) matches a digit only if followed by a non-digit.
(?!...)         | Negative lookahead – matches only if the pattern is not followed by the given pattern. | \d(?!\d) matches a digit only if not followed by another digit.
(?<=...)        | Positive lookbehind – matches only if preceded by the given pattern. | (?<=@)\w+ matches the word after @ in an email.
(?<!...)        | Negative lookbehind – matches only if not preceded by the given pattern. | (?<!@)\w+ matches the word if not preceded by @.
---

### 8. Common Regex Patterns

Pattern        | Description                                             | Example         
----------------|---------------------------------------------------------|-----------------
\d{2,4}         | Matches 2 to 4 digits.                                  | 123, 1234       
\w+             | Matches one or more word characters.                    | hello, a1b2     
\s+             | Matches one or more whitespace characters.              | ' ',  '', \t    
^[A-Za-z]       | Matches any alphabetic character at the start of the string. | A, a          
(?:...)         | Non-capturing group for grouping without storing.       | (?:abc)         
---

### 9. Flags

Flag            | Description                                             | Example         
----------------|---------------------------------------------------------|-----------------
re.IGNORECASE or re.I | Makes the regex case-insensitive.         | (?i)abc matches `abc`, `ABC`, `aBc`, etc.
re.DOTALL or re.S | Makes . match newlines (\n).               | a.b matches a\nb.
re.MULTILINE or re.M | Changes the behavior of ^ and $ to match the start and end of each line. | ^abc matches abc at the start of each line.
---

### 10. Examples

1. **Match an Email Address:**
   ```regex
   [a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}
